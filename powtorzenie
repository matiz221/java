public class DeathCauseStatistic {
    private String icdCode;
    private int[] deathsByAgeGroup;

    public DeathCauseStatistic(String icdCode, int[] deathsByAgeGroup) {
        this.icdCode = icdCode;
        this.deathsByAgeGroup = deathsByAgeGroup;
    }

    public static DeathCauseStatistic fromCsvLine(String line) {
        String[] values = line.split("\t");
        if (values.length < 3) return null;
        int[] deaths = new int[values.length - 2];
        for (int i = 2; i < values.length; i++) {
            deaths[i - 2] = Integer.parseInt(values[i].trim());
        }
        return new DeathCauseStatistic(values[0], deaths);
    }

    public String getIcdCode() {
        return icdCode;
    }

    public int getDeathsForAge(int age, int[] ageGroupBoundaries) {
        for (int i = 0; i < ageGroupBoundaries.length - 1; i++) {
            if (age >= ageGroupBoundaries[i] && age < ageGroupBoundaries[i + 1]) {
                return deathsByAgeGroup[i];
            }
        }
        int lastIndex = deathsByAgeGroup.length - 1;
        if (age >= ageGroupBoundaries[ageGroupBoundaries.length - 1]) {
            return deathsByAgeGroup[lastIndex];
        }
        return 0;
    }
}
// Nowa klasa
import java.io.BufferedReader;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

public class DeathCauseStatisticList {
    private List<DeathCauseStatistic> statistics = new ArrayList<>();

    public void repopulate(String filePath) {
        statistics.clear();
        try (BufferedReader reader = Files.newBufferedReader(Paths.get(filePath))) {
            reader.readLine(); // pomijamy nagłówek
            String line;
            while ((line = reader.readLine()) != null) {
                DeathCauseStatistic stat = DeathCauseStatistic.fromCsvLine(line);
                if (stat != null && isValidICD10(stat.getIcdCode())) {
                    statistics.add(stat);
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private boolean isValidICD10(String code) {
        return code.matches("^[A-Z][0-9]{2}.*");
    }

    private static class DiseaseDeathsPair {
        DeathCauseStatistic statistic;
        int deathCount;

        DiseaseDeathsPair(DeathCauseStatistic statistic, int deathCount) {
            this.statistic = statistic;
            this.deathCount = deathCount;
        }
    }

    public List<DeathCauseStatistic> mostDeadlyDiseases(int age, int n, int[] ageGroupBoundaries) {
        List<DiseaseDeathsPair> pairs = new ArrayList<>();
        for (DeathCauseStatistic stat : statistics) {
            int deaths = stat.getDeathsForAge(age, ageGroupBoundaries);
            pairs.add(new DiseaseDeathsPair(stat, deaths));
        }
        Collections.sort(pairs, new Comparator<DiseaseDeathsPair>() {
            @Override
            public int compare(DiseaseDeathsPair o1, DiseaseDeathsPair o2) {
                return Integer.compare(o2.deathCount, o1.deathCount);
            }
        });
        List<DeathCauseStatistic> result = new ArrayList<>();
        for (int i = 0; i < n && i < pairs.size(); i++) {
            result.add(pairs.get(i).statistic);
        }
        return result;
    }
}
// Interfejs
public interface ICDCodeTabular {
    String getDescription(String code) throws IndexOutOfBoundsException;
}

// Klasa implementujaca interfejs
import java.io.BufferedReader;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.HashMap;
import java.util.Map;

public class ICDCodeTabularOptimizedForTime implements ICDCodeTabular {
    private Map<String, String> codeToDescription = new HashMap<>();

    public ICDCodeTabularOptimizedForTime(String filePath) {
        try (BufferedReader reader = Files.newBufferedReader(Paths.get(filePath))) {
            String line;
            int lineNumber = 0;
            while ((line = reader.readLine()) != null) {
                lineNumber++;
                if (lineNumber < 88 || line.trim().isEmpty()) continue;
                String[] parts = line.trim().split(" ", 2);
                if (parts.length == 2 && parts[0].matches("^[A-Z][0-9]{2}.*")) {
                    codeToDescription.put(parts[0], parts[1]);
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    @Override
    public String getDescription(String code) throws IndexOutOfBoundsException {
        String desc = codeToDescription.get(code);
        if (desc == null) {
            throw new IndexOutOfBoundsException("Code not found: " + code);
        }
        return desc;
    }
}
// Kolejna klasa implementujaca interfejs
import java.io.BufferedReader;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;

public class ICDCodeTabularOptimizedForMemory implements ICDCodeTabular {
    private String filePath;

    public ICDCodeTabularOptimizedForMemory(String filePath) {
        this.filePath = filePath;
    }

    @Override
    public String getDescription(String code) throws IndexOutOfBoundsException {
        try (BufferedReader reader = Files.newBufferedReader(Paths.get(filePath))) {
            String line;
            int lineNumber = 0;
            while ((line = reader.readLine()) != null) {
                lineNumber++;
                if (lineNumber < 88 || line.trim().isEmpty()) continue;
                String[] parts = line.trim().split(" ", 2);
                if (parts.length == 2 && parts[0].equals(code)) {
                    return parts[1];
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        throw new IndexOutOfBoundsException("Code not found: " + code);
    }
}
//Klasa main!
import java.util.List;

public class Main {
    public static void main(String[] args) {
        String csvDeathsFile = "deaths_2019.csv";
        String icdDescriptionsFile = "kody_chorob.txt";

        int[] ageGroupBoundaries = {0, 10, 20, 30, 40, 50, 60, 70, 80, 90};

        DeathCauseStatisticList deathStats = new DeathCauseStatisticList();
        deathStats.repopulate(csvDeathsFile);

        List<DeathCauseStatistic> topDiseases = deathStats.mostDeadlyDiseases(35, 5, ageGroupBoundaries);

        System.out.println("Top 5 chorób dla wieku 35:");
        for (DeathCauseStatistic stat : topDiseases) {
            System.out.println(stat.getIcdCode());
        }

        ICDCodeTabular timeOptimized = new ICDCodeTabularOptimizedForTime(icdDescriptionsFile);
        ICDCodeTabular memoryOptimized = new ICDCodeTabularOptimizedForMemory(icdDescriptionsFile);

        String testCode = "J12.81";

        try {
            System.out.println("Opis (optymalizacja na czas): " + timeOptimized.getDescription(testCode));
        } catch (IndexOutOfBoundsException e) {
            System.out.println("Nie znaleziono kodu (czas)");
        }

        try {
            System.out.println("Opis (optymalizacja na pamięć): " + memoryOptimized.getDescription(testCode));
        } catch (IndexOutOfBoundsException e) {
            System.out.println("Nie znaleziono kodu (pamięć)");
        }
    }
}
