package server;

import java.io.*;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.*;
import java.util.stream.Collectors;

public class Server {
    private ServerSocket serverSocket;
    private List<ClientThread> clients = new ArrayList<>();

    public Server(int port) {
        try {
            this.serverSocket = new ServerSocket(port);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public void listen() {
        System.out.println("Serwer nasłuchuje...");
        while (true) {
            try {
                Socket socket = serverSocket.accept();
                ClientThread thread = new ClientThread(socket, this);
                clients.add(thread);
                thread.start();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    public void broadcast(ClientThread sender, String msg) {
        for (ClientThread c : clients)
            c.send("BR " + sender.getClientName() + ": " + msg);
    }

    public void whisper(ClientThread sender, String message) {
        String[] parts = message.split(" ", 2);
        String recipientName = parts[0];
        String content = parts.length > 1 ? parts[1] : "";
        Optional<ClientThread> recipient = getClient(recipientName);
        if (recipient.isPresent()) {
            recipient.get().send("WH " + sender.getClientName() + " " + content);
        } else {
            sender.send("NU " + recipientName);
        }
    }

    public void online(ClientThread sender) {
        String names = clients.stream()
                .map(ClientThread::getClientName)
                .collect(Collectors.joining(" "));
        sender.send("ON " + names);
    }

    public void removeClient(ClientThread client) {
        clients.remove(client);
        broadcastLogout(client);
    }

    public void broadcastLogin(ClientThread client) {
        for (ClientThread c : clients)
            if (c != client)
                c.send("LN " + client.getClientName());
    }

    public void broadcastLogout(ClientThread client) {
        for (ClientThread c : clients)
            if (c != client)
                c.send("LT " + client.getClientName());
    }

    private Optional<ClientThread> getClient(String name) {
        return clients.stream()
                .filter(c -> name.equals(c.getClientName()))
                .findFirst();
    }

    public void sendFile(ClientThread sender, String msg) throws IOException {
        String[] parts = msg.split(" ");
        String recipientName = parts[0];
        long fileSize = Long.parseLong(parts[1]);
        String fileName = parts[2];

        Optional<ClientThread> recipient = getClient(recipientName);
        if (recipient.isPresent()) {
            DataInputStream in = new DataInputStream(sender.getSocket().getInputStream());
            DataOutputStream out = new DataOutputStream(recipient.get().getSocket().getOutputStream());

            byte[] buffer = new byte[64];
            long received = 0;
            int count;
            recipient.get().send("FI " + sender.getClientName() + " " + fileSize + " " + fileName);
            while (received < fileSize) {
                count = in.read(buffer);
                received += count;
                out.write(buffer, 0, count);
            }
        } else {
            sender.send("NU " + recipientName);
        }
    }
}

package server;

import java.io.*;
import java.net.Socket;

public class ClientThread extends Thread {
    private Socket socket;
    private PrintWriter writer;
    private Server server;
    private String clientName = null;

    public ClientThread(Socket socket, Server server) {
        this.socket = socket;
        this.server = server;
    }

    public Socket getSocket() {
        return socket;
    }

    public void run() {
        try {
            InputStream in = socket.getInputStream();
            OutputStream out = socket.getOutputStream();
            BufferedReader reader = new BufferedReader(new InputStreamReader(in));
            writer = new PrintWriter(out, true);

            String message;
            while ((message = reader.readLine()) != null) {
                String prefix = message.substring(0, 2);
                String postfix = message.substring(2);
                switch (prefix) {
                    case "LO" -> login(postfix);
                    case "BR" -> server.broadcast(this, postfix);
                    case "WH" -> server.whisper(this, postfix);
                    case "ON" -> server.online(this);
                    case "FI" -> server.sendFile(this, postfix);
                }
            }
        } catch (IOException e) {
            server.removeClient(this);
        }
    }

    public void send(String message) {
        writer.println(message);
    }

    public void login(String name) {
        clientName = name;
        server.broadcastLogin(this);
        server.online(this);
    }

    public String getClientName() {
        return clientName;
    }
}

package server;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;

public class PixelDatabase {
    private static final String DB_URL = "jdbc:sqlite:pixel.db";

    public void savePixel(String token, int x, int y, String color) {
        try (Connection conn = DriverManager.getConnection(DB_URL)) {
            String sql = "INSERT INTO pixels(token, x, y, color) VALUES (?, ?, ?, ?)";
            PreparedStatement stmt = conn.prepareStatement(sql);
            stmt.setString(1, token);
            stmt.setInt(2, x);
            stmt.setInt(3, y);
            stmt.setString(4, color);
            stmt.executeUpdate();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}

package client;

import java.io.*;
import java.net.Socket;
import java.util.Scanner;

public class Client {
    public static void main(String[] args) throws Exception {
        Socket socket = new Socket("localhost", 12345);
        BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));
        PrintWriter writer = new PrintWriter(socket.getOutputStream(), true);
        Scanner scanner = new Scanner(System.in);

        System.out.print("Podaj login: ");
        String name = scanner.nextLine();
        writer.println("LO" + name);

        Thread readerThread = new Thread(() -> {
            String msg;
            try {
                while ((msg = reader.readLine()) != null) {
                    System.out.println(msg);
                }
            } catch (IOException e) {
                System.out.println("Rozłączono.");
            }
        });
        readerThread.start();

        while (true) {
            String input = scanner.nextLine();
            if (input.startsWith("/br ")) writer.println("BR" + input.substring(4));
            else if (input.startsWith("/wh ")) writer.println("WH" + input.substring(4));
            else if (input.equals("/on")) writer.println("ON");
        }
    }
}


